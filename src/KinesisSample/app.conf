# See petabridge.cmd configuration options here: https://cmd.petabridge.com/articles/install/host-configuration.html
petabridge.cmd{
	# default IP address used to listen for incoming petabridge.cmd client connections
	# should be a safe default as it listens on "all network interfaces".
	host = "0.0.0.0"

	# default port number used to listen for incoming petabridge.cmd client connections
	port = 9111
}

akka {
  actor {
    provider = cluster
  }
  
  remote {
    dot-netty.tcp {
      public-hostname = "localhost"
      hostname = "0.0.0.0"
      port = 4055
    }
  }            

  cluster {
    downing-provider-class = "Akka.Cluster.SplitBrainResolver, Akka.Cluster"
    split-brain-resolver {
      active-strategy = keep-majority
    }
    seed-nodes = []
    roles = ["api"]
    auto-down-unreachable-after = 5s
    run-coordinated-shutdown-when-down = on
  }

  kafka.committer {
    # Set maximum number of messages to commit at once
    max-batch = 1000

    # Set maximum interval between commits
    max-interval = 10s

    # Set parallelism for async committing
    parallelism = 1
  }
  
  # Properties for akka.kafka.ConsumerSettings can be
  # defined in this section or a configuration section with
  # the same layout.
  kafka.consumer {
    
    # Tuning property of scheduled polls.
    # Controls the interval from one scheduled poll to the next.
    poll-interval = 50ms

    # Tuning property of the `KafkaConsumer.poll` parameter.
    # Note that non-zero value means that the thread that
    # is executing the stage will be blocked. See also the `wakup-timeout` setting below.
    poll-timeout = 50ms

    # The stage will delay stopping the internal actor to allow processing of
    # messages already in the stream (required for successful committing).
    # This can be set to 0 for streams using `DrainingControl`.
    stop-timeout = 30s

    # If offset commit requests are not completed within this timeout
    # the returned Future is completed `CommitTimeoutException`.
    # The `Transactional.source` waits this ammount of time for the producer to mark messages as not
    # being in flight anymore as well as waiting for messages to drain, when rebalance is triggered.
    commit-timeout = 15s

    # If commits take longer than this time a warning is logged
    commit-time-warning = 1s

    # Not relevant for Kafka after version 2.1.0.
    # If set to a finite duration, the consumer will re-send the last committed offsets periodically
    # for all assigned partitions. See https://issues.apache.org/jira/browse/KAFKA-4682.
    commit-refresh-interval = infinite

    buffer-size = 128

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by the KafkaConsumerActor. Some blocking may occur.
    use-dispatcher = "akka.kafka.default-dispatcher"

    # Properties defined by Confluent.Kafka.ConsumerConfig
    # can be defined in this configuration section.
    kafka-clients {
      bootstrap.servers = "localhost:19092"
      client.id = client-1
      group.id = group-1
      # Disable auto-commit by default
      enable.auto.commit = false
    }

    # Time to wait for pending requests when a partition is closed
    wait-close-partition = 500ms

    # Limits the query to Kafka for a topic's position
    position-timeout = 5s

    # When using `AssignmentOffsetsForTimes` subscriptions: timeout for the
    # call to Kafka's API
    offset-for-times-timeout = 5s

    # Timeout for akka.kafka.Metadata requests
    # This value is used instead of Kafka's default from `default.api.timeout.ms`
    # which is 1 minute.
    metadata-request-timeout = 5s

    # Interval for checking that transaction was completed before closing the consumer.
    # Used in the transactional flow for exactly-once-semantics processing.
    eos-draining-check-interval = 30ms

    # Issue warnings when a call to a partition assignment handler method takes
    # longer than this.
    partition-handler-warning = 5s
  }

  kafka.default-dispatcher {
    type = Dispatcher
    throughput = 100
  }
}